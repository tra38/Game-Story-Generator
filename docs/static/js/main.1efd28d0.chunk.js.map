{"version":3,"sources":["logo.svg","history.js","randomGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","seed","s","mask","m_w","m_z","result","worldState","query","array","generator","seedInteger","split","reduce","prevHash","currVal","charCodeAt","randomGenerator","Seed","Math","floor","length","SearchInput","handleChange","bind","event","history","replace","target","value","id","type","placeholder","decodeURI","this","props","onChange","React","Component","App","state","location","hash","substr","listen","action","setState","className","src","logo","alt","queryWithoutHash","TextGenerator","Clipboard","plainText","addLineBreaks","data-clipboard-target","link","window","href","string","map","text","index","Fragment","key","SharingWidget","mystyle","display","navigator","share","title","style","onClick","url","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1efd28d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","//https://stackoverflow.com/a/29450606\n\nvar seed = function(s) {\n    var mask = 0xffffffff;\n    var m_w  = (123456789 + s) & mask;\n    var m_z  = (987654321 - s) & mask;\n\n    return function() {\n      m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\n      m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\n\n      var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\n      result /= 4294967296;\n      return result;\n    }\n}\n\nexport default seed;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport history from './history';\nimport Seed from './randomGenerator';\nimport Clipboard from 'clipboard';\n\nfunction hashCode(str) {\n  return str.split('').reduce((prevHash, currVal) =>\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0))|0, 0);\n}\n\nfunction sample(array, generator)\n{\n  var randomIndex = Math.floor(generator() * array.length);\n  return array[randomIndex];\n}\n\nfunction worldState(query)\n{\n  var seedInteger = hashCode(query);\n  var randomGenerator = Seed(seedInteger);\n\n  return sample([\"Long ago, you fought an epic battle against Randall Flagg's military forces. And, you lost. The people now live in a blissful state of ignorance, followed preprogrammed directives, with an implanted history and false consciousness to ensure their pliablity. Randall Flagg now hope to extract all the resources he can before he consign this dimension into oblivion. You have assumed a false identity, and blended yourself into this false world, hoping to liberate society from Randall Flagg, and maybe once more conquer this area on behalf of the Gunslingers.\", \"Long ago, you fought an epic battle agianst Randall Flag's military forces - though you have saved this dimension from Randall Flag, the people have been traumatized horribly. They could not handle the truth, you realize, so you offered them a pleasent falsehood instead - a Loctus Eater Machine designed to shield them from the horrors of this endless war. The people now live in a blissful state of ignorance, followed preprogrammed directives, with an implanted history and false consciousness to ensure their pliablity. But there are always dissenters out there, who oppose your wise decision, who seek to expose the people of this land to the horrors of reality. You, the ruler of this world, have assumed a false identity, and blended yourself into this false world, hoping to keep order and destroy the dissenters before they damage society utterly.\",\"Long ago, you fought an epic battle against Randall Flagg's military forces. Both you and Flagg led massive robotic armies - and watched in horrors as both armies went rogue, deciding to no longer follow the orders of their commanders. These rogue armies killed the native population and then implanted in themselves 'false memories' - allowing themselves to enjoy their own delusional power fantasies. So the battle was over - both sides lost. You, however, have been left stranded in this desolate wasteland - as the usual methods of retreat have been cut off during the chaos. Thus, you assumed a false identity, and blended yourself into this false world, to avoid detection. Now, though, you detect signs that Randall Flagg is planning to return back to this world, with a new army - to once more try to conquer this dimension. You must stop this new military invasion, while also taking advantage of Randall Flagg's new escape portal to flee this land, and retreat back into civilization.\"], randomGenerator);\n}\n\nclass SearchInput extends React.Component {\n  constructor() {\n    super()\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event)\n  {\n    history.replace(`#${event.target.value}`, null);\n  }\n\n  render() {\n    return (\n      <form>\n        <input id=\"site-search\" type=\"search\" placeholder={\"hello world\"} value={decodeURI(this.props.query)} onChange={this.handleChange} />\n      </form>\n    )\n  }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            query: history.location.hash,\n        };\n    }\n\n    queryWithoutHash()\n    {\n      return decodeURI(this.state.query.substr(1))\n    }\n\n    componentDidMount() {\n      history.listen((location, action) => {\n        this.setState({\n          query : history.location.hash\n        });\n      })\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <SearchInput query={ this.queryWithoutHash() }/>\n            <TextGenerator query={ this.queryWithoutHash() }/>\n          </header>\n        </div>\n      );\n  }\n}\n\nfunction TextGenerator(props)\n{\n  if ( props.query == null || props.query === \"\" )\n  {\n    return (<p>Please write the name of the game you want us to generate the story for.</p>);\n  }\n  else\n  {\n    new Clipboard(\".copy-btn\");\n\n    var plainText = Background(props.query);\n\n    return (<div>\n              <div id=\"copy-target\">\n                {addLineBreaks(plainText)}\n              </div>\n              <button className=\"copy-btn\" data-clipboard-target=\"#copy-target\" >\n                  Copy to clipboard\n              </button>\n              <SharingWidget link={window.location.href} query={props.query} />\n            </div>);\n  }\n}\n\nfunction Background(query)\n{\n  return `At first, there was chaos, disorder, mayhem, the \"Outer Darkness\". But order spontaneously arose from the Outer Darkness, creating the first realities. Long ago, the Old Ones have mastered the art of controlling the Outer Darkness, creating even more realities. They built a technologically advanced society in their homeland that they called \"Mid-World\". And, at the center of Mid-World was the Black Tower - the nexus of all universes, \"real\" and \"fictional\", allowing the Old Ones to extend their dominion over all possible realities.\\n\\nUpon reaching this pinnacle of success, there was nowhere else for the Old Ones to go but down...and down Mid-world went, the society collapsing into civil war and mayhem, encouraged by a man only known to us as the Crimson King. The Crimson King wanted to rebuild the multiverse in his own image - and to do that, he has to destroy the multiverse first by smashing Mid-World and the Black Tower, returning everything back to the Outer Darkness from which it sprung.\\n\\nThough Mid-World lie in ruins, the Black Tower survived, thanks to the help of Arthur Eld (the Mid-World version of King Arthur) who defeated the Crimson King and established the first Gunslingers, to maintain order in the land and protect against the Crimson King's schemes. After King Arthur's death, Mid-World splintered into various civilized baronies, who shared control over the Black Tower. Peace reigned  - though it was a peace enforced at gunpoint by the Gunslingers.\\n\\nIt was here that Randall Flagg, a henchman of the Crimson King, made his move. He, through his various proxies and shape-shifting skills, seek to undermine the baronies and lead a revolution against the Gunslingers' de facto rule, knowing that all that revolution would do is to lead to the same anarchy and mayhem that destroyed the Old Ones' civilization, and would ultimately leave the Black Tower defenseless.\\n\\nThe year is ■■■■■, and you're a Gunslinger, originally assigned to protect the '${query}' dimension from the Crimson King. ${worldState(query)}\\n\\nWelcome to the '${query}' dimension.`;\n}\n\n//https://www.freecodecamp.org/forum/t/newline-in-react-string-solved/68484/18\nconst addLineBreaks = string =>\n  string.split('\\n').map((text, index) => (\n    <React.Fragment key={`${text}-${index}`}>\n      {text}\n      <br />\n    </React.Fragment>\n  ));\n\n//https://css-tricks.com/how-to-use-the-web-share-api/\nclass SharingWidget extends React.Component\n{\n  componentDidMount() {\n  }\n\n  render() {\n    const mystyle = {\n      display: ( navigator.share ? \"inline\" : \"none\")\n    }\n    return(\n        <button className=\"share-button\"\n                type=\"button\"\n                title=\"Share this article\"\n                style={mystyle}\n                onClick={() =>\n                  navigator.share({\n                    title: `Game Story Generator - ${this.props.query}`,\n                    url: this.props.link\n                  })\n                }>\n          <span>Share</span>\n        </button>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}